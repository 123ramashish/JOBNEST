
<link rel="stylesheet" href="../css/chat-list.css">

<div class="container">
  <div class="row">
    <section class="msger col-md-9 chatBox mt-3 mt-md-0">
      <header class="msger-header">
        <div class="msger-header-title d-flex align-items-center justify-content-center">
          <div id="greenOnlineDot" class="mx-1"></div>
          <span style="color: #5a9c1a" id="userNameSpan"></span>
          <div id="typing" class="mx-3"></div>
        </div>
        <div class="msger-header-options"></div>
      </header>

      <main class="msger-chat">
        <!-- Messages will be appended here -->
      </main>

      <form class="msger-inputarea">
        <input id="myInput" type="text" class="msger-input" placeholder="Enter your message...">
        <button type="submit" class="msger-send-btn">Send</button>
      </form>
    </section>
    <div class="col-md-3 mt-3">
      <div class="list-group">
        <div id="showCountOfConnectedUser" class="list-group">
          <button type="button" class="list-group-item active"></button>
        </div>
        <div id="connected_users" class="list-group">
          <!-- Connected users will be appended here -->
        </div>
      </div>
    </div>
  </div>
</div>

<!-- <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js"></script> -->
<script src="http://localhost:3000/socket.io/socket.io.js"></script>
<script>
  const socket = io.connect("http://127.0.0.1:3000");

  const username = prompt("Enter your name!");
  socket.emit("join", { username });

  const userNameSpan = document.getElementById("userNameSpan");
  const connectedUsers = document.getElementById("connected_users");
  const typingIndicator = document.getElementById("typing");
  const connectedUsersCountButton = document.querySelector("#showCountOfConnectedUser > .list-group-item");

  socket.on("message", (message) => {
    userNameSpan.innerHTML = message.text;
    connectedUsersCountButton.innerText = `Connected users: ${message.users.length}`;

    connectedUsers.innerHTML = message.users
      .map(user => `
        <button type="button" class="list-group-item list-group-item-success">
          <span id="status-dot" class="mx-1"></span>
          ${user}
        </button>
      `)
      .join("");
  });

  const inputMessage = document.getElementById("myInput");
  const messageForm = document.querySelector(".msger-inputarea");
  messageForm.addEventListener("submit", (e) => {
    e.preventDefault();
    const message = inputMessage.value.trim();
    if (message !== "") {
      socket.emit("newMessage", { username, message });
      inputMessage.value = "";
      typingIndicator.innerText = null;
    }
  });

  socket.on("updateMessage", (data) => {
    const messageContainer = document.createElement("div");
    messageContainer.className = "msg-bubble";
    const messageInfo = document.createElement("div");
    messageInfo.className = "msg-info";
    const messageInfoName = document.createElement("div");
    messageInfoName.className = "msg-info-name";
    messageInfoName.innerText = data.username;
    const messageInfoTime = document.createElement("div");
    messageInfoTime.className = "msg-info-time";
    messageInfoTime.innerText = data.time;
    const messageText = document.createElement("div");
    messageText.className = "msg-text";
    messageText.innerText = data.message;
    messageInfo.appendChild(messageInfoName);
    messageInfo.appendChild(messageInfoTime);
    messageContainer.appendChild(messageInfo);
    messageContainer.appendChild(messageText);
    document.querySelector(".msger-chat").appendChild(messageContainer);
  });

  inputMessage.addEventListener("input", () => {
    typingIndicator.innerText = `${username} is typing...`;
  });
</script>
